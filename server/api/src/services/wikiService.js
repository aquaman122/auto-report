const { createWikiClient, wikiConfig } = require('../config/wiki');
const logger = require('../utils/logger');
const { formatToMarkdown } = require('../utils/wikiFormatter');

class WikiService {
  constructor() {
    this.client = createWikiClient();
  }

  // Wiki 페이지 생성
  async createPage(pageData) {
    try {
      const { title, content, space, tags, metadata } = pageData;
      
      // 마크다운 포맷팅
      const formattedContent = formatToMarkdown(content);
      
      // 페이지 데이터 구성
      const payload = {
        title: title,
        content: formattedContent,
        space: space || wikiConfig.spaceKey,
        type: 'page',
        status: 'published',
        tags: Array.isArray(tags) ? tags : [],
        metadata: metadata || {}
      };

      logger.info(`📝 Wiki 페이지 생성 시작: ${title}`);
      
      const response = await this.client.post('/api/pages', payload);
      
      logger.info(`✅ Wiki 페이지 생성 완료: ${response.data.id || response.data.key}`);
      
      return {
        success: true,
        pageId: response.data.id || response.data.key,
        url: response.data.url || response.data._links?.webui,
        title: response.data.title,
        data: response.data
      };
      
    } catch (error) {
      logger.error('❌ Wiki 페이지 생성 실패:', error.message);
      
      return {
        success: false,
        error: error.message,
        details: error.response?.data || error
      };
    }
  }

  // Wiki 페이지 업데이트
  async updatePage(pageId, pageData) {
    try {
      const { title, content, tags } = pageData;
      
      const formattedContent = formatToMarkdown(content);
      
      const payload = {
        title: title,
        content: formattedContent,
        tags: Array.isArray(tags) ? tags : []
      };

      logger.info(`📝 Wiki 페이지 업데이트 시작: ${pageId}`);
      
      const response = await this.client.put(`/api/pages/${pageId}`, payload);
      
      logger.info(`✅ Wiki 페이지 업데이트 완료: ${pageId}`);
      
      return {
        success: true,
        pageId: pageId,
        url: response.data.url || response.data._links?.webui,
        data: response.data
      };
      
    } catch (error) {
      logger.error('❌ Wiki 페이지 업데이트 실패:', error.message);
      
      return {
        success: false,
        error: error.message,
        details: error.response?.data || error
      };
    }
  }

  // Wiki 페이지 검색
  async searchPages(query, space = null) {
    try {
      const params = {
        q: query,
        space: space || wikiConfig.spaceKey,
        limit: 10
      };

      const response = await this.client.get('/api/search', { params });
      
      return {
        success: true,
        results: response.data.results || response.data,
        total: response.data.total || response.data.length
      };
      
    } catch (error) {
      logger.error('❌ Wiki 페이지 검색 실패:', error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  // 회의록을 Wiki 페이지로 변환
  async createMeetingPage(meetingData) {
    try {
      const { 
        title, 
        date, 
        summary, 
        participants, 
        agendas, 
        actionItems, 
        metadata 
      } = meetingData;

      // Wiki 페이지 제목 생성
      const pageTitle = `회의록_${date}_${title.replace(/[^a-zA-Z0-9가-힣]/g, '_')}`;
      
      // 마크다운 컨텐츠 생성
      const content = this.generateMeetingMarkdown(meetingData);
      
      // 태그 생성
      const tags = [
        '회의록',
        '자동생성',
        date,
        `참석자${Array.isArray(participants) ? participants.length : 0}명`,
        `액션아이템${Array.isArray(actionItems) ? actionItems.length : 0}개`
      ];

      // Wiki 페이지 생성
      const result = await this.createPage({
        title: pageTitle,
        content: content,
        space: wikiConfig.spaceKey,
        tags: tags,
        metadata: {
          meetingId: metadata?.meetingId,
          processingTime: metadata?.processingTime,
          autoGenerated: true,
          generatedAt: new Date().toISOString()
        }
      });

      return result;
      
    } catch (error) {
      logger.error('❌ 회의록 Wiki 페이지 생성 실패:', error.message);
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  // 회의록 마크다운 생성
  generateMeetingMarkdown(meetingData) {
    const {
      title,
      date,
      summary,
      participants,
      agendas,
      actionItems,
      documents,
      metadata
    } = meetingData;

    // 참석자 포맷팅
    const participantsText = Array.isArray(participants) && participants.length > 0 ?
      participants.map(p => {
        if (typeof p === 'object') {
          return `- **${p.name || p}** ${p.department ? `(${p.department})` : ''} ${p.role_in_meeting ? `- ${p.role_in_meeting}` : ''}`;
        }
        return `- ${p}`;
      }).join('\n') :
      '참석자 정보가 없습니다.';

    // 안건 포맷팅
    const agendasText = Array.isArray(agendas) && agendas.length > 0 ?
      agendas.map((agenda, index) => `
### ${index + 1}. ${agenda.agenda_title || `안건 ${index + 1}`}

**논의 내용:**
${agenda.discussion_content || '논의 내용 없음'}

**핵심 포인트:**
${Array.isArray(agenda.key_points) ? agenda.key_points.map(point => `- ${point}`).join('\n') : '없음'}

**결정 사항:**
${agenda.decisions ? (typeof agenda.decisions === 'object' ? JSON.stringify(agenda.decisions, null, 2) : agenda.decisions) : '없음'}

**다음 단계:**
${Array.isArray(agenda.next_steps) ? agenda.next_steps.map(step => `- ${step}`).join('\n') : '없음'}
`).join('\n') :
      '안건 정보가 없습니다.';

    // 액션아이템 포맷팅
    const actionItemsText = Array.isArray(actionItems) && actionItems.length > 0 ?
      actionItems.map((item, index) => {
        if (typeof item === 'object') {
          return `${index + 1}. **${item.task_description || item.task || item}**
   - 담당자: ${item.assignee || '미정'}
   - 마감일: ${item.deadline || '미정'}
   - 우선순위: ${item.priority || '보통'}
   - 상태: ${item.status || '진행 중'}`;
        }
        return `${index + 1}. ${item}`;
      }).join('\n\n') :
      '액션 아이템이 없습니다.';

    // 마크다운 생성
    return `
# ${title}

> 📅 **회의 날짜**: ${date}  
> ⏱️ **처리 시간**: ${metadata?.processingTime || 'N/A'}초  
> 🆔 **회의 ID**: ${metadata?.meetingId}  
> 🤖 **자동 생성**: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

---

## 👥 참석자
${participantsText}

---

## 📝 회의 요약
${summary || '요약 없음'}

---

## 📋 주요 안건
${agendasText}

---

## ✅ 액션 아이템 (${Array.isArray(actionItems) ? actionItems.length : 0}개)
${actionItemsText}

---

## 📎 관련 문서
${Object.keys(documents || {}).length > 0 ? 
  Object.keys(documents).map(format => 
    `- [${format.toUpperCase()} 파일 다운로드](${documents[format].url || '#'})`
  ).join('\n') : 
  '관련 문서가 없습니다.'
}

---

## 📊 회의 통계
- **총 참석자**: ${Array.isArray(participants) ? participants.length : 0}명
- **논의된 안건**: ${Array.isArray(agendas) ? agendas.length : 0}개
- **액션 아이템**: ${Array.isArray(actionItems) ? actionItems.length : 0}개
- **처리 시간**: ${metadata?.processingTime || 'N/A'}초

---

*이 문서는 음성 회의록 자동화 시스템에 의해 생성되었습니다.*  
*생성 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}*
`;
  }
}

module.exports = WikiService;