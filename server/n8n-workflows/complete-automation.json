{
  "name": "음성 회의록 Wiki 자동 저장",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "voice-meeting-wiki",
        "options": {
          "rawBody": true
        }
      },
      "name": "웹훅 트리거",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "webhook-trigger"
    },
    {
      "parameters": {
        "functionCode": "// 업로드된 데이터 검증 및 정리\nconst inputData = $input.first().json;\n\n// 파일 정보 확인\nif (!inputData.audioFile && !inputData.file_path) {\n  throw new Error('오디오 파일 정보가 필요합니다');\n}\n\n// 메타데이터 설정\nconst metadata = {\n  audioFile: inputData.audioFile || inputData.file_path,\n  language: inputData.language || 'ko',\n  userId: inputData.userId || 'system',\n  wikiSpace: inputData.wikiSpace || 'MEETING_MINUTES',\n  timestamp: new Date().toISOString(),\n  workflowId: $workflow.id,\n  requestId: Date.now().toString()\n};\n\n// 로깅\nconsole.log('🎙️ Wiki 자동 저장 워크플로우 시작:', metadata);\n\nreturn [{ json: metadata }];"
      },
      "name": "입력 검증",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "validate-input"
    },
    {
      "parameters": {
        "url": "http://meeting-api:3000/api/audio/upload",
        "options": {
          "bodyContentType": "form-data",
          "timeout": 600000
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "audioFile",
              "value": "={{ $json.audioFile }}"
            },
            {
              "name": "language",
              "value": "={{ $json.language }}"
            },
            {
              "name": "format",
              "value": "wiki"
            }
          ]
        }
      },
      "name": "음성 파일 처리",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 300],
      "id": "process-audio"
    },
    {
      "parameters": {
        "functionCode": "// API 응답 검증 및 Wiki용 데이터 포맷팅\nconst response = $input.first().json;\nconst inputMetadata = $('입력 검증').first().json;\n\n// 처리 실패 확인\nif (!response.success) {\n  const errorMsg = response.message || response.error || '음성 처리 실패';\n  console.error('❌ 음성 처리 실패:', errorMsg);\n  throw new Error(`음성 처리 실패: ${errorMsg}`);\n}\n\n// 회의 데이터 추출\nconst meetingData = {\n  // 기본 정보\n  meetingId: response.data.meeting_id,\n  audioFileId: response.data.audio_file_id,\n  processingTime: response.data.processing_time,\n  \n  // 회의 내용\n  title: response.data.meeting?.meeting_title || '회의록',\n  date: response.data.meeting?.meeting_date || new Date().toISOString().split('T')[0],\n  summary: response.data.summary || '요약 없음',\n  \n  // 참석자 및 액션 아이템\n  participants: response.data.participants || [],\n  actionItems: response.data.action_items || [],\n  agendas: response.data.agendas || [],\n  \n  // 문서 정보\n  documents: response.documents || {},\n  \n  // 메타데이터\n  metadata: inputMetadata,\n  processedAt: new Date().toISOString()\n};\n\n// 액션 아이템 개수 계산\nmeetingData.actionItemCount = Array.isArray(meetingData.actionItems) ? meetingData.actionItems.length : 0;\n\nconsole.log('✅ 회의 데이터 처리 완료:', { \n  meetingId: meetingData.meetingId, \n  title: meetingData.title,\n  actionItems: meetingData.actionItemCount,\n  participants: Array.isArray(meetingData.participants) ? meetingData.participants.length : 0\n});\n\nreturn [{ json: meetingData }];"
      },
      "name": "회의 데이터 포맷팅",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300],
      "id": "format-meeting-data"
    },
    {
      "parameters": {
        "functionCode": "// Wiki용 마크다운 컨텐츠 생성\nconst data = $input.first().json;\n\n// 제목 정리 (특수문자 제거)\nconst cleanTitle = data.title.replace(/[^a-zA-Z0-9가-힣\\s]/g, '').substring(0, 50);\nconst wikiTitle = `회의록_${data.date}_${cleanTitle}`;\n\n// 참석자 정보 포맷팅\nconst participantsText = Array.isArray(data.participants) && data.participants.length > 0 ?\n  data.participants.map(p => {\n    if (typeof p === 'object') {\n      return `- **${p.name || p}** ${p.department ? `(${p.department})` : ''} ${p.role_in_meeting ? `- ${p.role_in_meeting}` : ''}`;\n    }\n    return `- ${p}`;\n  }).join('\\n') :\n  '참석자 정보가 없습니다.';\n\n// 안건 정보 포맷팅\nconst agendasText = Array.isArray(data.agendas) && data.agendas.length > 0 ?\n  data.agendas.map((agenda, index) => `\n### ${index + 1}. ${agenda.agenda_title || `안건 ${index + 1}`}\n\n**논의 내용:**\n${agenda.discussion_content || '논의 내용 없음'}\n\n**핵심 포인트:**\n${Array.isArray(agenda.key_points) ? agenda.key_points.map(point => `- ${point}`).join('\\n') : '없음'}\n\n**결정 사항:**\n${agenda.decisions ? (typeof agenda.decisions === 'object' ? JSON.stringify(agenda.decisions, null, 2) : agenda.decisions) : '없음'}\n\n**다음 단계:**\n${Array.isArray(agenda.next_steps) ? agenda.next_steps.map(step => `- ${step}`).join('\\n') : '없음'}\n`).join('\\n') :\n  '안건 정보가 없습니다.';\n\n// 액션 아이템 포맷팅\nconst actionItemsText = data.actionItemCount > 0 ?\n  data.actionItems.map((item, index) => {\n    if (typeof item === 'object') {\n      return `${index + 1}. **${item.task_description || item.task || item}**\n   - 담당자: ${item.assignee || '미정'}\n   - 마감일: ${item.deadline || '미정'}\n   - 우선순위: ${item.priority || '보통'}\n   - 상태: ${item.status || '진행 중'}`;\n    }\n    return `${index + 1}. ${item}`;\n  }).join('\\n\\n') :\n  '액션 아이템이 없습니다.';\n\n// Wiki 마크다운 생성\nconst wikiContent = `\n# ${cleanTitle}\n\n> 📅 **회의 날짜**: ${data.date}  \n> ⏱️ **처리 시간**: ${data.processingTime || 'N/A'}초  \n> 🆔 **회의 ID**: ${data.meetingId}  \n> 🤖 **자동 생성**: ${data.processedAt}\n\n---\n\n## 👥 참석자\n${participantsText}\n\n---\n\n## 📝 회의 요약\n${data.summary}\n\n---\n\n## 📋 주요 안건\n${agendasText}\n\n---\n\n## ✅ 액션 아이템 (${data.actionItemCount}개)\n${actionItemsText}\n\n---\n\n## 📎 관련 문서\n${Object.keys(data.documents || {}).length > 0 ? \n  Object.keys(data.documents).map(format => \n    `- [${format.toUpperCase()} 파일 다운로드](${data.documents[format].url || '#'})`\n  ).join('\\n') : \n  '관련 문서가 없습니다.'\n}\n\n---\n\n## 📊 회의 통계\n- **총 참석자**: ${Array.isArray(data.participants) ? data.participants.length : 0}명\n- **논의된 안건**: ${Array.isArray(data.agendas) ? data.agendas.length : 0}개\n- **액션 아이템**: ${data.actionItemCount}개\n- **처리 시간**: ${data.processingTime || 'N/A'}초\n\n---\n\n*이 문서는 음성 회의록 자동화 시스템에 의해 생성되었습니다.*  \n*생성 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}*\n`;\n\nconst wikiData = {\n  title: wikiTitle,\n  content: wikiContent,\n  space: data.metadata.wikiSpace || 'MEETING_MINUTES',\n  tags: ['회의록', '자동생성', data.date, `액션아이템${data.actionItemCount}개`],\n  meetingId: data.meetingId,\n  date: data.date,\n  summary: {\n    participantCount: Array.isArray(data.participants) ? data.participants.length : 0,\n    agendaCount: Array.isArray(data.agendas) ? data.agendas.length : 0,\n    actionItemCount: data.actionItemCount,\n    processingTime: data.processingTime\n  }\n};\n\nconsole.log('📝 Wiki 컨텐츠 생성 완료:', { \n  title: wikiData.title, \n  contentLength: wikiContent.length,\n  actionItems: wikiData.summary.actionItemCount\n});\n\nreturn [{ json: wikiData }];"
      },
      "name": "Wiki 컨텐츠 생성",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300],
      "id": "create-wiki-content"
    },
    {
      "parameters": {
        "url": "{{ $vars.WIKI_BASE_URL }}/api/pages",
        "options": {
          "bodyContentType": "json",
          "timeout": 30000
        },
        "sendBody": true,
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.WIKI_API_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "bodyParameters": {
          "parameters": [
            {
              "name": "title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "content",
              "value": "={{ $json.content }}"
            },
            {
              "name": "space",
              "value": "={{ $json.space }}"
            },
            {
              "name": "type",
              "value": "page"
            },
            {
              "name": "status",
              "value": "published"
            },
            {
              "name": "metadata",
              "value": "={{ JSON.stringify($json.summary) }}"
            }
          ]
        }
      },
      "name": "Wiki 페이지 저장",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1340, 300],
      "id": "save-to-wiki"
    },
    {
      "parameters": {
        "functionCode": "// Wiki 저장 결과 확인 및 최종 완료 처리\nconst wikiResponse = $input.first().json;\nconst wikiData = $('Wiki 컨텐츠 생성').first().json;\nconst meetingData = $('회의 데이터 포맷팅').first().json;\n\n// Wiki 저장 성공 여부 확인\nconst wikiSuccess = !!(wikiResponse.id || wikiResponse.pageId || wikiResponse.url || wikiResponse.key || wikiResponse._links);\n\n// Wiki URL 생성\nlet wikiUrl = null;\nif (wikiSuccess) {\n  wikiUrl = wikiResponse.url || \n           wikiResponse._links?.webui || \n           wikiResponse._links?.base + wikiResponse._links?.webui ||\n           `${process.env.WIKI_BASE_URL || 'https://your-wiki.com'}/pages/${wikiResponse.id || wikiResponse.pageId || wikiResponse.key}`;\n}\n\n// 최종 결과 생성\nconst finalResult = {\n  success: true,\n  message: '🎉 음성 회의록 Wiki 자동 저장 완료!',\n  \n  // 회의 정보\n  meeting: {\n    id: meetingData.meetingId,\n    title: wikiData.title,\n    date: wikiData.date,\n    processingTime: meetingData.processingTime\n  },\n  \n  // Wiki 저장 결과\n  wiki: {\n    saved: wikiSuccess,\n    pageId: wikiResponse.id || wikiResponse.pageId || wikiResponse.key || null,\n    url: wikiUrl,\n    title: wikiResponse.title || wikiData.title,\n    space: wikiData.space,\n    error: wikiSuccess ? null : (wikiResponse.message || wikiResponse.error || wikiResponse.errors || 'Unknown error')\n  },\n  \n  // 요약 통계\n  statistics: {\n    participants: wikiData.summary.participantCount,\n    agendas: wikiData.summary.agendaCount,\n    actionItems: wikiData.summary.actionItemCount,\n    processingTimeSeconds: wikiData.summary.processingTime\n  },\n  \n  // 타임스탬프\n  timestamps: {\n    started: meetingData.metadata.timestamp,\n    processed: meetingData.processedAt,\n    completed: new Date().toISOString()\n  }\n};\n\n// 결과에 따른 로깅\nif (wikiSuccess) {\n  console.log('✅ Wiki 저장 성공!', {\n    pageId: finalResult.wiki.pageId,\n    url: finalResult.wiki.url,\n    title: finalResult.wiki.title,\n    actionItems: finalResult.statistics.actionItems\n  });\n} else {\n  console.error('❌ Wiki 저장 실패:', {\n    error: finalResult.wiki.error,\n    title: wikiData.title,\n    response: wikiResponse\n  });\n}\n\n// 전체 프로세스 완료 로그\nconsole.log('🎊 전체 프로세스 완료:', {\n  meetingId: finalResult.meeting.id,\n  wikiSaved: finalResult.wiki.saved,\n  processingTime: finalResult.meeting.processingTime,\n  participants: finalResult.statistics.participants,\n  actionItems: finalResult.statistics.actionItems,\n  totalDuration: new Date(finalResult.timestamps.completed) - new Date(finalResult.timestamps.started)\n});\n\nreturn [{ json: finalResult }];"
      },
      "name": "완료 처리 및 결과 확인",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 300],
      "id": "completion-handler"
    },
    {
      "parameters": {
        "functionCode": "// 에러 처리 및 로깅\nconst error = $input.first();\nconst inputData = $('입력 검증').first()?.json || {};\n\n// 에러 정보 수집\nconst errorInfo = {\n  timestamp: new Date().toISOString(),\n  workflowId: $workflow.id,\n  requestId: inputData.requestId,\n  step: '알 수 없음',\n  error: {\n    message: error.message || error.json?.message || 'Unknown error',\n    type: error.name || 'WorkflowError',\n    details: error.json || error\n  },\n  input: inputData\n};\n\n// 실패 단계 추정\nif (error.message?.includes('오디오') || error.message?.includes('음성')) {\n  errorInfo.step = '음성 처리';\n} else if (error.message?.includes('파일')) {\n  errorInfo.step = '파일 검증';\n} else if (error.message?.includes('Wiki') || error.message?.includes('위키')) {\n  errorInfo.step = 'Wiki 저장';\n} else if (error.message?.includes('컨텐츠') || error.message?.includes('포맷')) {\n  errorInfo.step = '컨텐츠 생성';\n}\n\n// 에러 로깅\nconsole.error('🚨 Wiki 자동화 워크플로우 실패:', errorInfo);\n\n// 사용자 친화적 에러 메시지 생성\nconst userFriendlyError = {\n  success: false,\n  message: '음성 회의록 Wiki 저장 중 오류가 발생했습니다',\n  error: {\n    step: errorInfo.step,\n    message: errorInfo.error.message,\n    timestamp: errorInfo.timestamp,\n    requestId: errorInfo.requestId\n  },\n  troubleshooting: {\n    '음성 처리': '음성 파일 형식이나 크기를 확인해주세요',\n    '파일 검증': '업로드된 파일이 올바른 오디오 형식인지 확인해주세요',\n    'Wiki 저장': 'Wiki API 토큰과 권한을 확인해주세요',\n    '컨텐츠 생성': '회의 데이터 포맷을 확인해주세요'\n  }[errorInfo.step] || '관리자에게 문의해주세요'\n};\n\nreturn [{ json: userFriendlyError }];"
      },
      "name": "에러 처리",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 500],
      "id": "error-handler"
    }
  ],
  "connections": {
    "웹훅 트리거": {
      "main": [
        [
          {
            "node": "입력 검증",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "입력 검증": {
      "main": [
        [
          {
            "node": "음성 파일 처리",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "음성 파일 처리": {
      "main": [
        [
          {
            "node": "회의 데이터 포맷팅",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "회의 데이터 포맷팅": {
      "main": [
        [
          {
            "node": "Wiki 컨텐츠 생성",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wiki 컨텐츠 생성": {
      "main": [
        [
          {
            "node": "Wiki 페이지 저장",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wiki 페이지 저장": {
      "main": [
        [
          {
            "node": "완료 처리 및 결과 확인",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": ["voice", "meeting", "wiki", "automation"],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "2"
}