{
  "name": "음성 회의록 완전 자동화",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "voice-meeting-upload",
        "options": {
          "rawBody": true
        }
      },
      "name": "웹훅 트리거",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "webhook-trigger"
    },
    {
      "parameters": {
        "functionCode": "// 업로드된 데이터 검증 및 정리\nconst inputData = $input.first().json;\n\n// 파일 정보 확인\nif (!inputData.audioFile && !inputData.file_path) {\n  throw new Error('오디오 파일 정보가 필요합니다');\n}\n\n// 메타데이터 설정\nconst metadata = {\n  audioFile: inputData.audioFile || inputData.file_path,\n  language: inputData.language || 'ko',\n  userId: inputData.userId || 'system',\n  priority: inputData.priority || 'normal',\n  notify_channels: inputData.notify_channels || ['email'],\n  timestamp: new Date().toISOString(),\n  workflowId: $workflow.id,\n  requestId: $binary.data?.mimeType || Date.now().toString()\n};\n\n// 로깅\nconsole.log('워크플로우 시작:', metadata);\n\nreturn [{ json: metadata }];"
      },
      "name": "입력 검증",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "id": "validate-input"
    },
    {
      "parameters": {
        "url": "http://meeting-api:3000/api/audio/upload",
        "options": {
          "bodyContentType": "form-data",
          "timeout": 600000
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "audioFile",
              "value": "={{ $json.audioFile }}"
            },
            {
              "name": "language",
              "value": "={{ $json.language }}"
            },
            {
              "name": "format",
              "value": "all"
            }
          ]
        }
      },
      "name": "음성 파일 처리",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [680, 300],
      "id": "process-audio"
    },
    {
      "parameters": {
        "functionCode": "// API 응답 검증 및 데이터 포맷팅\nconst response = $input.first().json;\n\n// 처리 실패 확인\nif (!response.success) {\n  const errorMsg = response.message || response.error || '음성 처리 실패';\n  console.error('음성 처리 실패:', errorMsg);\n  throw new Error(`음성 처리 실패: ${errorMsg}`);\n}\n\n// 성공 데이터 추출\nconst result = {\n  success: true,\n  \n  // 기본 정보\n  audioFileId: response.data.audio_file_id,\n  meetingId: response.data.meeting_id,\n  processingTime: response.data.processing_time,\n  \n  // 회의 내용\n  summary: response.data.summary || '요약 없음',\n  actionItems: response.data.action_items || [],\n  participants: response.data.participants || '참석자 없음',\n  \n  // 생성된 문서들\n  documents: response.documents || {},\n  \n  // URL들\n  urls: response.urls || {},\n  \n  // 처리 시간\n  processedAt: new Date().toISOString(),\n  \n  // 원본 메타데이터\n  metadata: $('입력 검증').first().json\n};\n\n// 알림용 데이터 준비\nresult.notification = {\n  title: '🎙️ 음성 회의록 생성 완료',\n  message: `회의록이 성공적으로 생성되었습니다.\\n\\n📝 요약: ${result.summary.substring(0, 100)}${result.summary.length > 100 ? '...' : ''}\\n👥 참석자: ${result.participants}\\n⏱️ 처리시간: ${result.processingTime}초`,\n  actionItemCount: Array.isArray(result.actionItems) ? result.actionItems.length : 0,\n  hasActionItems: Array.isArray(result.actionItems) && result.actionItems.length > 0\n};\n\nconsole.log('처리 완료:', { \n  meetingId: result.meetingId, \n  processingTime: result.processingTime,\n  actionItemCount: result.notification.actionItemCount\n});\n\nreturn [{ json: result }];"
      },
      "name": "결과 포맷팅",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300],
      "id": "format-result"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.notification.hasActionItems }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "name": "액션아이템 확인",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 200],
      "id": "check-action-items"
    },
    {
      "parameters": {
        "functionCode": "// 액션아이템이 있는 경우 특별 알림 생성\nconst data = $input.first().json;\n\nconst urgentNotification = {\n  title: '🎯 긴급: 액션아이템이 포함된 회의록',\n  message: `중요한 액션아이템이 ${data.notification.actionItemCount}개 포함된 회의록이 생성되었습니다.\\n\\n` + \n           `📝 회의 요약:\\n${data.summary}\\n\\n` +\n           `✅ 액션아이템들:\\n${data.actionItems.slice(0, 3).map(item => `• ${item.task}${item.assignee ? ' (담당: ' + item.assignee + ')' : ''}`).join('\\n')}` +\n           `${data.actionItems.length > 3 ? '\\n... 및 ' + (data.actionItems.length - 3) + '개 더' : ''}\\n\\n` +\n           `📋 즉시 확인이 필요합니다!`,\n  priority: 'high',\n  channels: ['email', 'slack'],\n  recipients: ['admin@company.com', 'manager@company.com'],\n  documents: data.documents,\n  meetingId: data.meetingId\n};\n\nreturn [{ json: { ...data, urgentNotification } }];"
      },
      "name": "긴급 알림 준비",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 120],
      "id": "urgent-notification"
    },
    {
      "parameters": {
        "functionCode": "// 일반 알림 생성\nconst data = $input.first().json;\n\nconst standardNotification = {\n  title: data.notification.title,\n  message: data.notification.message,\n  priority: 'normal',\n  channels: ['email'],\n  recipients: ['team@company.com'],\n  documents: data.documents,\n  meetingId: data.meetingId\n};\n\nreturn [{ json: { ...data, standardNotification } }];"
      },
      "name": "일반 알림 준비",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 280],
      "id": "standard-notification"
    },
    {
      "parameters": {
        "url": "http://meeting-api:3000/api/document/generate",
        "options": {
          "bodyContentType": "json"
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "meeting_id",
              "value": "={{ $json.meetingId }}"
            },
            {
              "name": "format",
              "value": "html"
            }
          ]
        }
      },
      "name": "추가 문서 생성",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 400],
      "id": "generate-additional-docs"
    },
    {
      "parameters": {
        "functionCode": "// 통합 알림 발송 준비\nconst data = $input.first().json;\nconst notifications = [];\n\n// 긴급 알림이 있는 경우\nif (data.urgentNotification) {\n  notifications.push(data.urgentNotification);\n}\n\n// 일반 알림이 있는 경우  \nif (data.standardNotification) {\n  notifications.push(data.standardNotification);\n}\n\n// 각 알림을 개별 출력으로 생성\nreturn notifications.map(notification => ({ json: notification }));"
      },
      "name": "알림 배포",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 300],
      "id": "distribute-notifications"
    },
    {
      "parameters": {
        "url": "http://meeting-api:3000/api/meeting/{{ $json.meetingId }}/notify",
        "options": {
          "bodyContentType": "json"
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "notification",
              "value": "={{ $json }}"
            }
          ]
        }
      },
      "name": "알림 발송",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1780, 300],
      "id": "send-notifications"
    },
    {
      "parameters": {
        "functionCode": "// 최종 성공 로그 및 응답 생성\nconst data = $input.first().json;\n\nconst finalResult = {\n  success: true,\n  message: '음성 회의록 자동화 프로세스가 완료되었습니다',\n  \n  // 처리 결과\n  meeting_id: data.meetingId,\n  audio_file_id: data.audioFileId,\n  processing_time_seconds: data.processingTime,\n  \n  // 생성된 컨텐츠\n  summary: data.summary,\n  action_items_count: data.notification.actionItemCount,\n  participants: data.participants,\n  \n  // 문서 링크\n  documents: Object.keys(data.documents || {}).map(format => ({\n    format: format,\n    url: data.documents[format].url,\n    filename: data.documents[format].fileName\n  })),\n  \n  // 처리 시간\n  started_at: data.metadata.timestamp,\n  completed_at: new Date().toISOString(),\n  \n  // 알림 발송 상태\n  notifications_sent: true,\n  notification_channels: data.urgentNotification ? ['email', 'slack'] : ['email']\n};\n\n// 성공 로그\nconsole.log('🎉 워크플로우 완료:', {\n  meetingId: finalResult.meeting_id,\n  processingTime: finalResult.processing_time_seconds,\n  actionItems: finalResult.action_items_count,\n  documentsGenerated: finalResult.documents.length\n});\n\nreturn [{ json: finalResult }];"
      },
      "name": "완료 처리",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2000, 300],
      "id": "completion-handler"
    },
    {
      "parameters": {
        "functionCode": "// 에러 처리 및 로깅\nconst error = $input.first().json;\nconst inputData = $('입력 검증').first()?.json || {};\n\n// 에러 정보 수집\nconst errorInfo = {\n  timestamp: new Date().toISOString(),\n  workflowId: $workflow.id,\n  requestId: inputData.requestId,\n  error: {\n    message: error.message || 'Unknown error',\n    type: error.name || 'WorkflowError',\n    stack: error.stack || null\n  },\n  input: inputData,\n  step: 'unknown' // 어느 단계에서 실패했는지\n};\n\n// 실패 단계 추정\nif (error.message?.includes('음성 처리')) {\n  errorInfo.step = 'audio-processing';\n} else if (error.message?.includes('파일')) {\n  errorInfo.step = 'file-validation';\n} else if (error.message?.includes('알림')) {\n  errorInfo.step = 'notification';\n}\n\n// 에러 로깅\nconsole.error('🚨 워크플로우 실패:', errorInfo);\n\n// 에러 알림 준비\nconst errorNotification = {\n  title: '❌ 음성 회의록 처리 실패',\n  message: `음성 파일 처리 중 오류가 발생했습니다.\\n\\n` +\n           `📁 파일: ${inputData.audioFile || 'Unknown'}\\n` +\n           `⚠️ 오류: ${error.message}\\n` +\n           `🕐 발생시간: ${errorInfo.timestamp}\\n\\n` +\n           `관리자에게 문의하세요.`,\n  priority: 'high',\n  error: errorInfo\n};\n\nreturn [{ json: errorNotification }];"
      },
      "name": "에러 처리",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 500],
      "id": "error-handler"
    },
    {
      "parameters": {
        "url": "http://meeting-api:3000/api/system/error-notification",
        "options": {
          "bodyContentType": "json"
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "error_info",
              "value": "={{ $json }}"
            }
          ]
        }
      },
      "name": "에러 알림 발송",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1120, 500],
      "id": "send-error-notification"
    }
  ],
  "connections": {
    "웹훅 트리거": {
      "main": [
        [
          {
            "node": "입력 검증",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "입력 검증": {
      "main": [
        [
          {
            "node": "음성 파일 처리",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "음성 파일 처리": {
      "main": [
        [
          {
            "node": "결과 포맷팅",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "결과 포맷팅": {
      "main": [
        [
          {
            "node": "액션아이템 확인",
            "type": "main",
            "index": 0
          },
          {
            "node": "추가 문서 생성",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "액션아이템 확인": {
      "main": [
        [
          {
            "node": "긴급 알림 준비",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "일반 알림 준비",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "긴급 알림 준비": {
      "main": [
        [
          {
            "node": "알림 배포",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "일반 알림 준비": {
      "main": [
        [
          {
            "node": "알림 배포",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "추가 문서 생성": {
      "main": [
        [
          {
            "node": "알림 배포",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "알림 배포": {
      "main": [
        [
          {
            "node": "알림 발송",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "알림 발송": {
      "main": [
        [
          {
            "node": "완료 처리",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handler"
  },
  "staticData": null,
  "tags": ["voice", "meeting", "automation", "ai"],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}